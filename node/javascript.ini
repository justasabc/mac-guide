
# http://docs.appcelerator.com/titanium/3.0/#!/guide/JavaScript_Development_Primer

# don't pollute the global scope 
//app.js
//------

// BAD - we put five variables in the global scope which could be clobbered
var key = 'value',
    foo = 'bar',
    charlie = 'horse';

function helper() {
    //help out
}

function info(msg) {
    helper(msg);
    Ti.API.info(msg);
}

// Better - define a single namespace to hold all your variables
var myapp = {}; // namespace and only global variable
myapp.key = 'value';

/* Or, define the namespace and a few variables all at once with
var myapp = {
    key: 'value',
    foo: 'bar',
    charlie: 'horse'
};
*/

// add a function to your namespace
myapp.dosomething = function(foo) {
        // do something
};

// extend and encapsulate by using self-calling functions
(function() {
    function helper() {
        // this is a private function not directly accessible from the global scope
    }

    myapp.info = function(msg) {
                // added to the app's namespace, so a public function
        helper(msg);
        Ti.API.info(msg)
    };
})();
// you could then call your function with
myapp.info('Hello World');

# Use === and !== instead of == and !=
var testme = '1';
if(testme === 1) {
        // this will not be executed
}

# The ternary operator
var xyz = (somecondition === somevalue) ? 'abc' : '123';

# Lots of variables? Use a comma
var foo = true, me = 'awesome';

#Efficient loops
var names = ['Jeff','Nolan','Marshall','Don'];
for(var i=0,j=names.length;i<j;i++){
    process(names[i]);
}

# Wrap self-calling functions in parenthesis
var myValue = (function() {
    //do stuff
    return someValue;
})();


